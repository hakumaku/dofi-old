[tool.poetry]
name = "dofi"
version = "0.1.0"
description = ""
authors = ["haku <gentlebuuny@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
# cli framework
typer = { extras = ["all"], version = "^0.9.0" }
# web framework
fastapi = { extras = ["all"], version = "^0.102" }
# database
sqlalchemy = {extras = ["mypy"], version = "^2.0.20"}
sqlalchemy-utils = "^0.41.1"
alembic = "^1.11.3"
# pydantic (schema validation)
pydantic = { extras = ["dotenv"], version = "^2.3.0" }
pydantic-settings = "^2.0.3"
# utilities
aiohttp = "^3.8.5"
pyyaml = "^6.0.1"

[tool.poetry.group.dev.dependencies]
# ruff
ruff = "^0.0.286"
# formatter
black = "^23.3.0"
# test
pytest = "^7.3.1"
mock = "^5.0.2"
pytest-sugar = "^0.9.7"
pytest-html = "^3.2.0"
pytest-mock = "^3.10.0"
pytest-asyncio = "^0.21.0"
# coverage
coverage = { extras = ["toml"], version = "*" }
# mypy
mypy = "^1.2.0"
types-mock = "^5.0.0.6"
typing-extensions = "^4.7.1"
types-sqlalchemy-utils = "^1.0.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = [".", "dofi"]
testpaths = [
    "tests",
]
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py"
]
mock_use_standalone_module = true
norecursedirs = []
addopts = []

[tool.coverage.run]
branch = true
source = ["dofi"]
omit = [
    "*/tests/*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@overload"
]

[tool.coverage.xml]
output = "public/coverage/coverage.xml"

[tool.coverage.html]
directory = "public/coverage"

[tool.black]
line-length = 119
extend_exclude = ""

[tool.ruff]
src = ["dofi", "tests"]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "PL", "RUF", "W", "Q", "RET", "SLF", "SIM", "TID", "ERA", "PT", "I"]
ignore = ["PLR0913"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
# Same as Black.
line-length = 119
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Assume Python 3.8
target-version = "py311"

[tool.ruff.isort]
combine-as-imports = true
split-on-trailing-comma = true
section-order = [
    "future",
    "standard-library",
    "pytest",
    "fastapi",
    "typer",
    "sqlalchemy",
    "third-party",
    "first-party",
    "local-folder"
]
known-local-folder = ["dofi", "tests"]

[tool.ruff.isort.sections]
"pytest" = ["pytest", "pytest_mock"]
"fastapi" = ["fastapi", "starlette", "orjson", "pydantic", "pydantic_core", "pydantic_settings"]
"typer" = ["typer"]
"sqlalchemy" = ["sqlalchemy", "sqlalchemy_utils"]


[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.mypy]
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin", ]
check_untyped_defs = true
warn_redundant_casts = true
warn_unreachable = true
warn_return_any = true
warn_unused_configs = true
exclude = [
    ".venv",
    "venv",
]
